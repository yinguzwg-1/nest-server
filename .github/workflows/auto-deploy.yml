name: 🚀 Nest.js Auto Build and Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write

jobs:
  # 构建和推送镜像
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 Install dependencies
      run: npm install --legacy-peer-deps

    - name: 🔍 Run linting (optional)
      run: npm run lint || echo "⚠️ Linting failed, but continuing with build..."
      continue-on-error: true

    - name: 🏗️ Build Nest.js application
      run: npm run build

    - name: ✅ Verify build output
      run: |
        echo "✅ Build completed successfully"
        echo "📁 Current directory: $(pwd)"
        echo "📁 dist directory contents:"
        ls -la dist/
        echo "📁 Total dist size:"
        du -sh dist/

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production

    - name: ✅ Build Summary
      run: |
        echo "🎉 Docker 镜像构建和推送完成！"
        echo "📦 镜像地址: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:${{ github.sha }}"
        echo "📦 最新标签: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest"

  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Check SSH Secrets
      run: |
        echo "🔍 检查 SSH 配置..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ HOST secret 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ USERNAME secret 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.SSH_KEY }}" ]; then
          echo "❌ SSH_KEY secret 未设置"
          exit 1
        fi
        echo "✅ SSH 配置检查通过"
        echo "🌐 目标服务器: ${{ secrets.HOST }}"
        echo "👤 用户名: ${{ secrets.USERNAME }}"

    - name: 🔍 Test server connectivity
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        command_timeout: "30s"
        script: |
          echo "🔍 测试服务器连接..."
          echo "服务器信息:"
          uname -a
          echo "当前用户: $(whoami)"
          echo "当前目录: $(pwd)"
          echo "✅ 连接测试完成"

    - name: 🚀 Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始自动化部署 Nest.js 应用..."
          echo "🌍 环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "📦 提交: ${{ github.sha }}"
          
          # 检查并创建项目目录
          PROJECT_DIR="$HOME/nest-server"
          echo "📁 项目目录: $PROJECT_DIR"
          
          # 如果目录不存在，克隆项目
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "📥 克隆项目到服务器..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone https://github.com/${{ github.repository }}.git .
          else
            cd "$PROJECT_DIR"
            echo "📥 处理本地更改并拉取最新代码..."
            # 保存当前更改
            git stash push -m "Auto stash before pull - $(date)" || echo "没有需要保存的更改"
            # 重置到远程分支
            git fetch origin
            git reset --hard origin/main || git reset --hard origin/master
            git clean -fd
          fi
          
          # 检查 Docker 是否安装
          if ! command -v docker &> /dev/null; then
            echo "📦 安装 Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # 配置 Docker 镜像源（解决网络问题）
          echo "🔧 配置 Docker 镜像源..."
          sudo mkdir -p /etc/docker
          sudo tee /etc/docker/daemon.json <<-'EOF'
          {
             "registry-mirrors": ["https://docker.registry.cyou",
              "https://docker-cf.registry.cyou",
              "https://dockercf.jsdelivr.fyi",
              "https://docker.jsdelivr.fyi",
              "https://dockertest.jsdelivr.fyi",
              "https://mirror.aliyuncs.com",
              "https://dockerproxy.com",
              "https://mirror.baidubce.com",
              "https://docker.m.daocloud.io",
              "https://docker.nju.edu.cn",
              "https://docker.mirrors.sjtug.sjtu.edu.cn",
              "https://docker.mirrors.ustc.edu.cn",
              "https://mirror.iscas.ac.cn",
              "https://docker.rainbond.cc"]
          }
          EOF
          sudo systemctl daemon-reload
          sudo systemctl restart docker
          
          # 检查 Docker Compose 是否安装
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "📦 安装 Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # 检查 Docker Compose 版本并设置命令
          if docker compose version &> /dev/null; then
            COMPOSE_CMD="docker compose"
            echo "✅ 使用 Docker Compose v2: $(docker compose version)"
          elif command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
            echo "✅ 使用 Docker Compose v1: $(docker-compose --version)"
          else
            echo "❌ Docker Compose 未安装"
            exit 1
          fi
          
          # 创建 docker-compose.yml 文件
          echo "📝 创建 docker-compose.yml 文件..."
          cat > docker-compose.yml << 'EOF'
          services:
            # MySQL 数据库
            mysql:
              image: mysql:8.0
              container_name: nest_mysql
              restart: unless-stopped
              environment:
                MYSQL_ROOT_PASSWORD: qq123456
                MYSQL_DATABASE: nest_db
                MYSQL_USER: nest_user
                MYSQL_PASSWORD: nest_password
              ports:
                - "3306:3306"
              volumes:
                - mysql_data:/var/lib/mysql
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                timeout: 20s
                retries: 10
          
            # NestJS API 服务
            nestjs-api:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest
              container_name: nest_api
              restart: unless-stopped
              ports:
                - "3001:3001"
              environment:
                NODE_ENV: production
                PORT: 3001
                DB_HOST: mysql
                DB_PORT: 3306
                DB_USERNAME: root
                DB_PASSWORD: qq123456
                DB_DATABASE: nest_db
              depends_on:
                mysql:
                  condition: service_healthy
              volumes:
                - nestjs_logs:/app/logs
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          
          volumes:
            mysql_data:
              driver: local
            nestjs_logs:
              driver: local
          
          networks:
            app-network:
              driver: bridge
          EOF
          
          # 登录到 GitHub Container Registry
          echo "🔐 登录到 GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 拉取最新镜像（增加超时时间）
          echo "📥 拉取最新 Docker 镜像..."
          timeout 300 docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest || {
            echo "⚠️ 镜像拉取超时，尝试使用本地构建..."
            docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest .
          }
          
          # 停止并删除现有容器
          echo "🛑 停止现有容器..."
          $COMPOSE_CMD down || true
          
          # 预拉取 MySQL 镜像（解决网络问题）
          echo "📥 预拉取 MySQL 镜像..."
          timeout 300 docker pull mysql:8.0 || {
            echo "⚠️ MySQL 镜像拉取失败，尝试使用国内镜像源..."
            docker pull mysql/mysql-server:8.0 || echo "MySQL 镜像拉取失败，将在启动时重试"
          }
          
          # 启动服务
          echo "🚀 启动 Docker 服务..."
          $COMPOSE_CMD up -d
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 30
          
          # 检查服务状态
          echo "📋 检查服务状态..."
          $COMPOSE_CMD ps
          
          # 检查容器是否正在运行
          if $COMPOSE_CMD ps | grep -q "Up"; then
            echo "✅ 容器已启动"
            
            # 等待更长时间让服务完全启动
            echo "⏳ 等待服务完全启动..."
            sleep 30
            
            # 健康检查
            if curl -f http://localhost:3001 > /dev/null 2>&1; then
              echo "✅ 部署成功！"
              echo "🌐 API 地址: http://${{ secrets.HOST }}:3001"
              echo "📦 部署版本: ${{ github.sha }}"
            else
              echo "⚠️ 健康检查失败，查看详细日志..."
              echo "📋 MySQL 日志:"
              $COMPOSE_CMD logs mysql
              echo "📋 NestJS 日志:"
              $COMPOSE_CMD logs nestjs-api
            fi
          else
            echo "❌ 容器启动失败"
            echo "📋 查看启动日志:"
            $COMPOSE_CMD logs
            exit 1
          fi
          
          echo "🎉 Nest.js 自动化部署完成！" 