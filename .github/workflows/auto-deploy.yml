name: 🚀 Nest.js Auto Build and Deploy with Docker

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}
  APP_NAME: nest-server
  CONTAINER_NAME: nest-server-app
  PORT: 3001

permissions:
  contents: read
  packages: write

jobs:
  # 第一阶段：构建并推送 Docker 镜像
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      # 输出关键标签，供部署阶段使用
      latest_tag: ${{ steps.meta.outputs.tags }}
      short_sha_tag: ${{ steps.extract_tag.outputs.short_sha_tag }}
    
    steps:
      # 1. 拉取代码
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. 初始化 Docker Buildx
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. 登录 GHCR
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # 4. 生成镜像标签
      - name: 🏷️ Extract image metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.APP_NAME }}
          tags: |
            # 标签1：短 SHA 标签（格式：分支名-短SHA，如 main-e37f1b9）
            type=sha,prefix=${{ github.ref_name }}-,format=short
            # 标签2：latest 标签（仅默认分支生效）
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.branch=${{ github.ref_name }}

      # 5. 提取短 SHA 标签
      - name: 📌 Extract short SHA tag
        id: extract_tag
        run: |
          SHORT_SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | grep "${{ github.ref_name }}-" | head -1)
          echo "short_sha_tag=$SHORT_SHA_TAG" >> $GITHUB_OUTPUT
          echo "✅ 提取短 SHA 标签：$SHORT_SHA_TAG"

      # 6. 构建并推送镜像
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
          platforms: linux/amd64

  # 第二阶段：部署到阿里云服务器（依赖第一阶段完成）
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # 等待构建阶段完成
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      # 1. 拉取代码
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. 测试服务器连接
      - name: 🔍 Test server connectivity
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT || 22 }}
          command_timeout: "30s"
          script: |
            echo "🔍 测试服务器连接成功！"
            echo "🖥️ 服务器信息: $(uname -a)"
            echo "🐳 Docker 版本: $(docker --version)"
            echo "✅ Docker 服务状态: $(systemctl is-active docker)"

      # 3. 核心部署步骤：拉取镜像 + 启动容器
      - name: 🚀 Deploy to server (Docker)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT || 22 }}
          command_timeout: "600s"
          script: |
            # 定义关键变量（与构建阶段一致）
            IMAGE_FULL_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.APP_NAME }}"
            SHORT_SHA_TAG="${{ needs.build-and-push.outputs.short_sha_tag }}"
            LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.APP_NAME }}:latest"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            PORT="${{ env.PORT }}"

            echo "🚀 开始部署 ${{ env.APP_NAME }} 应用..."
            echo "🌍 部署环境: ${{ github.event.inputs.environment || 'production' }}"
            echo "📦 分支: ${{ github.ref_name }} | 提交: ${{ github.sha }}"
            echo "🐳 镜像: $SHORT_SHA_TAG（或 $LATEST_TAG）"
            echo "📦 容器: $CONTAINER_NAME | 端口: $PORT"

            # 步骤1：登录 GHCR
            echo "🔐 服务器登录 GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin || {
              echo "❌ GHCR 登录失败！请检查 PAT 令牌权限";
              exit 1;
            }

            # 步骤2：拉取最新镜像
            echo "📥 拉取镜像: $SHORT_SHA_TAG..."
            docker pull $SHORT_SHA_TAG || {
              echo "⚠️ 短 SHA 标签镜像拉取失败，尝试拉取 latest 标签...";
              docker pull $LATEST_TAG;
              SHORT_SHA_TAG=$LATEST_TAG;
            }

            # 步骤3：停止并删除旧容器
            echo "🛑 清理旧容器..."
            if docker ps -q -f name=$CONTAINER_NAME; then
              docker stop $CONTAINER_NAME && echo "✅ 旧容器已停止";
            else
              echo "ℹ️ 没有运行中的旧容器";
            fi
            if docker ps -aq -f name=$CONTAINER_NAME; then
              docker rm $CONTAINER_NAME && echo "✅ 旧容器已删除";
            else
              echo "ℹ️ 没有旧容器需要删除";
            fi

            # 步骤4：清理悬空镜像
            echo "🧹 清理悬空镜像..."
            docker image prune -f && echo "✅ 悬空镜像清理完成"

            # 步骤5：启动新容器
            echo "🚀 启动新容器: $CONTAINER_NAME..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p $PORT:3001 \
              -e NODE_ENV=production \
              -e PORT=3001 \
              -e DB_HOST=223.4.248.176 \
              -e DB_PORT=3306 \
              -e DB_USERNAME=deploy_user \
              -e DB_PASSWORD=qq123456 \
              -e DB_DATABASE=nest_db \
              -e YOUDAO_APP_KEY=20220529001233310 \
              -e YOUDAO_APP_SECRET=yuM_bOR5cbjZVttocWs1 \
              $SHORT_SHA_TAG || {
                echo "❌ 容器启动失败！";
                exit 1;
              }

            # 步骤6：验证容器状态
            echo "🔍 验证容器状态..."
            sleep 5
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "✅ 容器启动成功！";
              docker ps | grep $CONTAINER_NAME;
            else
              echo "❌ 容器启动失败，查看日志:";
              docker logs $CONTAINER_NAME --tail 50;
              exit 1;
            fi

            # 步骤7：健康检查
            echo "🔍 应用健康检查（共 10 次重试）..."
            HEALTH_CHECK_PASSED=false
            for i in {1..10}; do
              if curl -f -m 10 http://localhost:$PORT/health > /dev/null 2>&1; then
                HEALTH_CHECK_PASSED=true;
                break;
              else
                echo "ℹ️ 第 $i 次健康检查失败，等待 5 秒重试...";
                sleep 5;
              fi
            done

            # 最终结果提示
            if [ "$HEALTH_CHECK_PASSED" = true ]; then
              echo "🎉 部署成功！";
              echo "🌐 应用访问地址: http://${{ secrets.HOST }}:$PORT";
              echo "🌐 API 健康检查: http://${{ secrets.HOST }}:$PORT/health";
              echo "📦 部署版本: ${{ github.sha }}";
              echo "🐳 容器状态: 正常运行";
            else
              echo "❌ 健康检查失败！应用无法访问";
              echo "📋 应用日志:";
              docker logs $CONTAINER_NAME --tail 100;
              exit 1;
            fi 