name: 🚀 Nest.js Auto Build and Deploy with PM2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write

jobs:
  # 构建和推送镜像
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 Install dependencies
      run: npm install --legacy-peer-deps

    - name: 🔍 Run linting (optional)
      run: npm run lint || echo "⚠️ Linting failed, but continuing with build..."
      continue-on-error: true

    - name: 🏗️ Build Nest.js application
      run: npm run build

    - name: ✅ Verify build output
      run: |
        echo "✅ Build completed successfully"
        echo "📁 Current directory: $(pwd)"
        echo "📁 dist directory contents:"
        ls -la dist/
        echo "📁 Total dist size:"
        du -sh dist/

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production

    - name: ✅ Build Summary
      run: |
        echo "🎉 Docker 镜像构建和推送完成！"
        echo "📦 镜像地址: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:${{ github.sha }}"
        echo "📦 最新标签: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest"

  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Check SSH Secrets
      run: |
        echo "🔍 检查 SSH 配置..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ HOST secret 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ USERNAME secret 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.SSH_KEY }}" ]; then
          echo "❌ SSH_KEY secret 未设置"
          exit 1
        fi
        echo "✅ SSH 配置检查通过"
        echo "🌐 目标服务器: ${{ secrets.HOST }}"
        echo "👤 用户名: ${{ secrets.USERNAME }}"

    - name: 🔍 Test server connectivity
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        command_timeout: "30s"
        script: |
          echo "🔍 测试服务器连接..."
          echo "服务器信息:"
          uname -a
          echo "当前用户: $(whoami)"
          echo "当前目录: $(pwd)"
          echo "✅ 连接测试完成"

    - name: 🚀 Deploy to server with PM2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始自动化部署 Nest.js 应用 (PM2)..."
          echo "🌍 环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "📦 提交: ${{ github.sha }}"
          
          # 检查并创建项目目录
          PROJECT_DIR="$HOME/nest-server"
          echo "📁 项目目录: $PROJECT_DIR"
          
          # 如果目录不存在，克隆项目
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "📥 克隆项目到服务器..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone https://github.com/${{ github.repository }}.git .
          else
            cd "$PROJECT_DIR"
            echo "📥 处理本地更改并拉取最新代码..."
            # 保存当前更改
            git stash push -m "Auto stash before pull - $(date)" || echo "没有需要保存的更改"
            # 重置到远程分支
            git fetch origin
            git reset --hard origin/main || git reset --hard origin/master
            git clean -fd
          fi
          
          # 检查 Node.js 是否安装
          if ! command -v node &> /dev/null; then
            echo "📦 安装 Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # 检查 npm 是否安装
          if ! command -v npm &> /dev/null; then
            echo "📦 安装 npm..."
            sudo apt-get install -y npm
          fi
          
          # 检查 PM2 是否安装
          if ! command -v pm2 &> /dev/null; then
            echo "📦 安装 PM2..."
            sudo npm install -g pm2
          fi
          
          # 检查 MySQL 是否安装和运行
          if ! command -v mysql &> /dev/null; then
            echo "📦 安装 MySQL..."
            sudo apt-get update
            sudo apt-get install -y mysql-server
            sudo systemctl start mysql
            sudo systemctl enable mysql
            
            # 配置 MySQL
            echo "🔧 配置 MySQL..."
            sudo mysql -e "CREATE DATABASE IF NOT EXISTS nest_db;"
            sudo mysql -e "CREATE USER IF NOT EXISTS root@localhost IDENTIFIED BY 'Zhengwenguo0503.';"
            sudo mysql -e "GRANT ALL PRIVILEGES ON nest_db.* TO root@localhost;"
            sudo mysql -e "FLUSH PRIVILEGES;"
          else
            echo "✅ MySQL 已安装"
            # 确保 MySQL 服务运行
            sudo systemctl start mysql || true
          fi
          
          # 安装项目依赖
          echo "📦 安装项目依赖..."
          npm install --legacy-peer-deps
          
          # 构建项目
          echo "🏗️ 构建项目..."
          npm run build
          
          # 创建 PM2 配置文件
          echo "📝 创建 PM2 配置文件..."
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'nest-server',
              script: 'dist/src/main.js',
              instances: 'max',
              exec_mode: 'cluster',
              env: {
                NODE_ENV: 'production',
                PORT: 3001,
                DB_HOST: '223.4.248.176',
                DB_PORT: 3306,
                DB_USERNAME: 'deploy_user',
                DB_PASSWORD: 'qq123456',
                DB_DATABASE: 'nest_db',
                YOUDAO_APP_KEY: '20220529001233310',
                YOUDAO_APP_SECRET: 'yuM_bOR5cbjZVttocWs1'
              },
              env_production: {
                NODE_ENV: 'production',
                PORT: 3001,
                DB_HOST: '223.4.248.176',
                DB_PORT: 3306,
                DB_USERNAME: 'deploy_user',
                DB_PASSWORD: 'qq123456',
                DB_DATABASE: 'nest_db',
                YOUDAO_APP_KEY: '20220529001233310',
                YOUDAO_APP_SECRET: 'yuM_bOR5cbjZVttocWs1'
              },
              error_file: './logs/err.log',
              out_file: './logs/out.log',
              log_file: './logs/combined.log',
              time: true,
              max_memory_restart: '1G',
              restart_delay: 4000,
              max_restarts: 10,
              min_uptime: '10s',
              watch: false,
              ignore_watch: ['node_modules', 'logs', 'dist'],
              merge_logs: true,
              log_date_format: 'YYYY-MM-DD HH:mm:ss Z'
            }]
          };
          EOF
          
          # 创建日志目录
          mkdir -p logs
          
          # 停止现有 PM2 进程
          echo "🛑 停止现有 PM2 进程..."
          pm2 stop nest-server || true
          pm2 delete nest-server || true
          
          # 启动应用
          echo "🚀 启动 Nest.js 应用..."
          pm2 start ecosystem.config.js --env production
          
          # 保存 PM2 配置
          pm2 save
          
          # 设置 PM2 开机自启
          pm2 startup
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 20
          
          # 检查服务状态
          echo "📋 检查服务状态..."
          pm2 status
          pm2 logs nest-server --lines 20
          
          # 健康检查
          echo "🔍 执行健康检查..."
          for i in {1..30}; do
            if curl -f http://localhost:3001 > /dev/null 2>&1; then
              echo "✅ 部署成功！"
              echo "🌐 API 地址: http://${{ secrets.HOST }}:3001"
              echo "📦 部署版本: ${{ github.sha }}"
              echo "📊 PM2 状态:"
              pm2 show nest-server
              break
            else
              echo "⏳ 等待应用启动... ($i/30)"
              sleep 2
            fi
          done
          
          if [ $i -eq 30 ]; then
            echo "❌ 健康检查失败，应用启动超时"
            echo "📋 PM2 日志:"
            pm2 logs nest-server --lines 50
            echo "📋 应用日志:"
            tail -n 50 logs/combined.log || echo "日志文件不存在"
            exit 1
          fi
          
          echo "🎉 Nest.js PM2 自动化部署完成！" 