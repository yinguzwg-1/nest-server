name: 🚀 Nest.js Auto Build and Deploy with PM2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write

jobs:
  # 构建和推送镜像
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    timeout-minutes: 30  # 增加构建超时时间
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        # 移除npm缓存配置，因为项目使用pnpm

    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: 📦 Install dependencies
      run: |
        echo "📦 安装项目依赖..."
        pnpm install --frozen-lockfile --prefer-offline
        echo "✅ 依赖安装完成"

    - name: 🔍 Run linting (optional)
      run: pnpm run lint || echo "⚠️ Linting failed, but continuing with build..."
      continue-on-error: true

    - name: 🏗️ Build Nest.js application
      run: pnpm run build
      timeout-minutes: 15  # 构建步骤超时时间

    - name: ✅ Verify build output
      run: |
        echo "✅ Build completed successfully"
        echo "📁 Current directory: $(pwd)"
        echo "📁 dist directory contents:"
        ls -la dist/
        echo "📁 Total dist size:"
        du -sh dist/

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
        platforms: linux/amd64  # 指定平台，减少构建时间

    - name: ✅ Build Summary
      run: |
        echo "🎉 Docker 镜像构建和推送完成！"
        echo "📦 镜像地址: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:${{ github.sha }}"
        echo "📦 最新标签: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/nestjs:latest"

  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    timeout-minutes: 45  # 增加部署超时时间
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Check SSH Secrets
      run: |
        echo "🔍 检查 SSH 配置..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ HOST secret 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ USERNAME secret 未设置"
          exit 1
        fi
        if [ -z "${{ secrets.SSH_KEY }}" ]; then
          echo "❌ SSH_KEY secret 未设置"
          exit 1
        fi
        echo "✅ SSH 配置检查通过"
        echo "🌐 目标服务器: ${{ secrets.HOST }}"
        echo "👤 用户名: ${{ secrets.USERNAME }}"

    - name: 🚀 Deploy to server with PM2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        command_timeout: "600s"  # 增加命令超时时间到10分钟
        script: |
          set -e  # 遇到错误立即退出
          
          echo "🚀 开始自动化部署 Nest.js 应用 (PM2)..."
          echo "🌍 环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "📦 提交: ${{ github.sha }}"
          
          # 设置环境变量
          export NODE_ENV=production
          export PATH=$PATH:/usr/local/bin
          
          # 检查并创建项目目录
          PROJECT_DIR="$HOME/nest-server"
          echo "📁 项目目录: $PROJECT_DIR"
          
          # 如果目录不存在，克隆项目
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "📥 克隆项目到服务器..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone --depth 1 https://github.com/${{ github.repository }}.git .  # 浅克隆，减少下载时间
          else
            cd "$PROJECT_DIR"
            echo "📥 处理本地更改并拉取最新代码..."
            # 保存当前更改
            git stash push -m "Auto stash before pull - $(date)" || echo "没有需要保存的更改"
            # 重置到远程分支
            git fetch origin --depth 1  # 浅获取
            git reset --hard origin/main || git reset --hard origin/master
            git clean -fd
          fi
          
          # 检查并安装必要工具（带超时和重试）
          install_dependencies() {
            local max_retries=3
            local retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              echo "📦 安装依赖 (尝试 $((retry_count + 1))/$max_retries)..."
              
              if ! command -v node &> /dev/null; then
                echo "📦 安装 Node.js..."
                curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
                sudo apt-get install -y nodejs
              fi
              
              if ! command -v pm2 &> /dev/null; then
                echo "📦 安装 PM2..."
                sudo npm install -g pm2 --timeout=300000  # 5分钟超时
              fi
              
              if ! command -v pnpm &> /dev/null; then
                echo "📦 安装 pnpm..."
                sudo npm install -g pnpm --timeout=300000  # 5分钟超时
              fi
              
              echo "✅ 依赖安装完成"
              return 0
            done
            
            echo "❌ 依赖安装失败，已达到最大重试次数"
            return 1
          }
          
          # 执行依赖安装
          if ! install_dependencies; then
            echo "❌ 依赖安装失败"
            exit 1
          fi
          
          # 确保 MySQL 服务运行
          sudo systemctl start mysql || true
          
          # 安装项目依赖（带超时和重试）
          install_project_deps() {
            local max_retries=3
            local retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              echo "📦 安装项目依赖 (尝试 $((retry_count + 1))/$max_retries)..."
              
              if timeout 600 pnpm install --frozen-lockfile --prefer-offline; then  # 10分钟超时
                echo "✅ 项目依赖安装完成"
                return 0
              else
                echo "⚠️ 项目依赖安装失败，重试中..."
                retry_count=$((retry_count + 1))
                sleep 30
              fi
            done
            
            echo "❌ 项目依赖安装失败，已达到最大重试次数"
            return 1
          }
          
          if ! install_project_deps; then
            echo "❌ 项目依赖安装失败"
            exit 1
          fi
          
          # 构建项目（带超时）
          echo "🏗️ 构建项目..."
          if ! timeout 300 pnpm run build; then  # 5分钟超时
            echo "❌ 项目构建失败"
            exit 1
          fi
          
          # 创建 PM2 配置文件
          echo "📝 创建 PM2 配置文件..."
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'nest-server',
              script: 'npm',
              args: 'run start:prod',
              cwd: './',
              instances: 1,
              autorestart: true,
              watch: false,
              max_memory_restart: '1G',
              env: {
                NODE_ENV: 'production',
                PORT: 3001,
                DB_HOST: '223.4.248.176',
                DB_PORT: 3306,
                DB_USERNAME: 'deploy_user',
                DB_PASSWORD: 'qq123456',
                DB_DATABASE: 'nest_db',
                YOUDAO_APP_KEY: '20220529001233310',
                YOUDAO_APP_SECRET: 'yuM_bOR5cbjZVttocWs1'
              },
              error_file: './logs/err.log',
              out_file: './logs/out.log',
              log_file: './logs/combined.log',
              time: true,
              restart_delay: 4000,
              max_restarts: 10,
              min_uptime: '10s',
              ignore_watch: ['node_modules', 'logs', 'dist'],
              merge_logs: true,
              log_date_format: 'YYYY-MM-DD HH:mm:ss Z'
            }]
          };
          EOF
          
          # 创建日志目录
          mkdir -p logs
          
          # 停止现有 PM2 进程
          echo "🛑 停止现有 PM2 进程..."
          pm2 stop nest-server || true
          pm2 delete nest-server || true
          
          # 启动应用
          echo "🚀 启动 Nest.js 应用..."
          pm2 start ecosystem.config.js --env production
          
          # 保存 PM2 配置
          pm2 save
          
          # 设置 PM2 开机自启
          pm2 startup
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 15  # 增加等待时间
          
          # 检查服务状态
          echo "📋 检查服务状态..."
          pm2 status
          
          # 健康检查函数（带重试）
          health_check() {
            local max_attempts=20  # 增加重试次数
            local attempt=1
            
            echo "🔍 执行健康检查..."
            while [ $attempt -le $max_attempts ]; do
              if curl -f --connect-timeout 10 --max-time 30 http://localhost:3001/health > /dev/null 2>&1; then
                echo "✅ 健康检查通过！"
                return 0
              else
                echo "⏳ 等待应用启动... ($attempt/$max_attempts)"
                sleep 3  # 增加等待间隔
                attempt=$((attempt + 1))
              fi
            done
            
            echo "❌ 健康检查失败"
            return 1
          }
          
          # 执行健康检查
          if health_check; then
            echo "✅ 部署成功！"
            echo "🌐 API 地址: http://${{ secrets.HOST }}:3001"
            echo "🌐 健康检查: http://${{ secrets.HOST }}:3001/health"
            echo "📦 部署版本: ${{ github.sha }}"
            echo "📊 PM2 状态:"
            pm2 show nest-server
            echo "🎉 Nest.js PM2 自动化部署完成！"
          else
            echo "⚠️ 健康检查失败，但应用可能仍在启动中"
            echo "📋 PM2 状态:"
            pm2 status
            echo "📋 最近日志:"
            pm2 logs nest-server --lines 10
            echo "⚠️ 部署流程完成，请手动检查应用状态"
            exit 1
          fi 